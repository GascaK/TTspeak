#include <iostream>
#include <string>
#include <ttspeak.h>

using namespace std;

int main(int argc, char** argv)
{
	HRESULT hr = NULL;

	CComPtr<ISpRecognizer>	cpRecog;
	CComPtr<ISpObjectToken> cpToken;
	CComPtr<ISpRecoContext> recoCon;
	CComPtr<ISpRecoGrammar> recoGram;
	CComPtr<ISpRecoResult>  recoRes;

	if (FAILED(::CoInitialize(NULL)))
		throw std::exception("Failed at CoInitiailize: ");

	hr = SpFindBestToken(SPCAT_RECOGNIZERS, L"language=409", NULL, &cpToken);
	if (FAILED(hr))
		throw std::exception("Failed at FindBestToken");

	hr = cpRecog.CoCreateInstance(CLSID_SpSharedRecognizer);
	if (FAILED(hr))
		throw std::exception("Failed at CoCreateInstance: ");

	hr = cpRecog->SetRecognizer(cpToken);
	if (FAILED(hr))
		throw std::exception("Failed at SetRecognizer: ");

	hr = cpRecog->SetRecoState(SPRST_ACTIVE);
	if (FAILED(hr))
		throw std::exception("Failed at SetRecoState: ");

	hr = cpRecog->CreateRecoContext(&recoCon);
	if (FAILED(hr))
		throw std::exception("Failed at CreateRecoContext: ");

	hr = recoCon->SetNotifyWin32Event();
	if (FAILED(hr))
		throw std::exception("Failed at SetNotifyWin32Event: ");

	hr = recoCon->SetInterest(SPFEI(SPEI_RECOGNITION), SPFEI(SPEI_RECOGNITION));
	if (FAILED(hr))
		throw std::exception("Failed at SetInterest: ");

	hr = recoCon->CreateGrammar(0, &recoGram);
	if (FAILED(hr))
		throw std::exception("Failed at CreateGrammar: ");

	hr = recoGram->LoadDictation(NULL, SPLO_STATIC);
	if (FAILED(hr))
		throw std::exception("Failed at LoadDiction: ");

	hr = recoGram->SetDictationState(SPRS_ACTIVE);
	if (FAILED(hr))
		throw std::exception("Failed at SetDictionState: ");

	HANDLE hSpeechEvent = recoCon->GetNotifyEventHandle();
	if (hSpeechEvent == INVALID_HANDLE_VALUE)
		return 1;
	HANDLE hExitEvent = CreateEvent(NULL, FALSE, FALSE, NULL);

	HANDLE rghEvents[] = { hSpeechEvent, hExitEvent };
	bool fContinue = true;

	while (SUCCEEDED(hr) || fContinue == true)
	{
		DWORD dMessage = WaitForMultipleObjects(sp_countof(rghEvents),
			rghEvents, FALSE, INFINITE);
		CSpEvent spEvent;
		LPWSTR coMemResult = NULL;

		switch(dMessage)
		{
		case WAIT_OBJECT_0:
			while (spEvent.GetFrom(recoCon) == S_OK)
			{
				case SPEI_RECOGNITION:
					recoRes = spEvent.RecoResult();
					hr = recoRes->GetText(SP_GETWHOLEPHRASE, SP_GETWHOLEPHRASE,
						TRUE, &coMemResult, NULL);
					if (FAILED(hr))
						cout << "Failed in Recognition: \n";
					wprintf(L"Recognition event: %s\r\n", coMemResult);
					if (coMemResult != NULL)
						CoTaskMemFree(coMemResult);
					break;
				case SPEI_END_SR_STREAM:
					wprintf(L"End of Stream");
					SetEvent(hExitEvent);
					break;
			}
			break;
		case WAIT_OBJECT_0 + 1:
			fContinue = false;
			break;
		}

	}

	system("pause");
	::CoUninitialize();
	return 0;
}
